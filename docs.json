[
  {
    "kind": "namespace",
    "name": "C",
    "snippet": "export namespace C {  \n    export var x = 1;  \n}",
    "location": {
      "filename": "./test.ts",
      "line": 4,
      "col": 0
    },
    "jsDoc": null,
    "namespaceDef": {}
  },
  {
    "kind": "function",
    "name": "diagnostics",
    "snippet": "export function diagnostics(a: Promise<string>, b: () => Record<string, string>): Promise<[DiagnosticItem[] | undefined, Record<string, string>]>",
    "location": {
      "filename": "./test.ts",
      "line": 11,
      "col": 0
    },
    "jsDoc": "/**\n * Complicated function\n */",
    "functionDef": {
      "params": [
        {
          "name": "a",
          "tsType": {
            "repr": "Promise<string>"
          }
        },
        {
          "name": "b",
          "tsType": {
            "repr": "() => Record<string, string>"
          }
        }
      ],
      "returnType": {
        "repr": "Promise<[DiagnosticItem[] | undefined, Record<string, string>]>"
      },
      "isAsync": false,
      "isGenerator": false
    }
  },
  {
    "kind": "function",
    "name": "foo",
    "snippet": "export function foo(a: string, b: number): void",
    "location": {
      "filename": "./test.ts",
      "line": 22,
      "col": 0
    },
    "jsDoc": "/**\n * Hello there, this is a multiline JSdoc.\n * \n * It has many lines\n * \n * Or not that many?\n */",
    "functionDef": {
      "params": [
        {
          "name": "a",
          "tsType": {
            "repr": "string"
          }
        },
        {
          "name": "b",
          "tsType": {
            "repr": "number"
          }
        }
      ],
      "returnType": {
        "repr": "void"
      },
      "isAsync": false,
      "isGenerator": false
    }
  },
  {
    "kind": "function",
    "name": "bar",
    "snippet": "export function bar(a: string, b: number): void",
    "location": {
      "filename": "./test.ts",
      "line": 27,
      "col": 0
    },
    "jsDoc": "/** This is single line JSdoc */",
    "functionDef": {
      "params": [
        {
          "name": "a",
          "tsType": {
            "repr": "string"
          }
        },
        {
          "name": "b",
          "tsType": {
            "repr": "number"
          }
        }
      ],
      "returnType": {
        "repr": "void"
      },
      "isAsync": false,
      "isGenerator": false
    }
  },
  {
    "kind": "class",
    "name": "Foobar",
    "snippet": "export class Foobar extends Fizz implements Buzz",
    "location": {
      "filename": "./test.ts",
      "line": 32,
      "col": 0
    },
    "jsDoc": "/** Class doc */",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": "/** Constructor js doc */",
          "snippet": "constructor(name: string, private private2: number, protected protected2: number)",
          "accessibility": null,
          "name": "constructor"
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "snippet": "private private1: boolean;",
          "tsType": {
            "repr": "boolean"
          },
          "readonly": false,
          "accessibility": "private",
          "isAbstract": false,
          "isStatic": false,
          "name": "private1"
        },
        {
          "jsDoc": "/** Js doc for protected1 */",
          "snippet": "protected protected1: number;",
          "tsType": {
            "repr": "number"
          },
          "readonly": false,
          "accessibility": "protected",
          "isAbstract": false,
          "isStatic": false,
          "name": "protected1"
        },
        {
          "jsDoc": null,
          "snippet": "public public1: boolean;",
          "tsType": {
            "repr": "boolean"
          },
          "readonly": false,
          "accessibility": "public",
          "isAbstract": false,
          "isStatic": false,
          "name": "public1"
        },
        {
          "jsDoc": "/** \n     * Js doc for public2\n     * \n     * Foobar\n     * \n     * Foo\n     */",
          "snippet": "public2: number;",
          "tsType": {
            "repr": "number"
          },
          "readonly": false,
          "accessibility": null,
          "isAbstract": false,
          "isStatic": false,
          "name": "public2"
        }
      ],
      "methods": [
        {
          "jsDoc": "/** Async foo method */",
          "snippet": "async foo(): Promise<void>",
          "accessibility": null,
          "isAbstract": false,
          "isStatic": false,
          "name": "foo",
          "kind": "method"
        },
        {
          "jsDoc": "/** Sync bar method */",
          "snippet": "bar(): void",
          "accessibility": null,
          "isAbstract": false,
          "isStatic": false,
          "name": "bar",
          "kind": "method"
        }
      ]
    }
  },
  {
    "kind": "variable",
    "name": "<TODO>",
    "snippet": "export const fizzBuzz: string = \"fizzBuzz\";",
    "location": {
      "filename": "./test.ts",
      "line": 61,
      "col": 0
    },
    "jsDoc": "/** Something about fizzBuzz */"
  },
  {
    "kind": "interface",
    "name": "Reader",
    "snippet": "export interface Reader {\n    /** Read n bytes */\n    read(buf: Uint8Array, something: unknown): Promise<number>\n}",
    "location": {
      "filename": "./test.ts",
      "line": 66,
      "col": 0
    },
    "jsDoc": "/**\n * Interface js doc\n */",
    "interfaceDef": {}
  },
  {
    "kind": "typeAlias",
    "name": "NumberArray",
    "snippet": "export type NumberArray = Array<number>;",
    "location": {
      "filename": "./test.ts",
      "line": 72,
      "col": 0
    },
    "jsDoc": "/** Array holding numbers */",
    "typeAliasDef": {}
  },
  {
    "kind": "typeAlias",
    "name": "OperatingSystem",
    "snippet": "export type OperatingSystem = \"mac\" | \"win\" | \"linux\";",
    "location": {
      "filename": "./test.ts",
      "line": 74,
      "col": 0
    },
    "jsDoc": null,
    "typeAliasDef": {}
  },
  {
    "kind": "typeAlias",
    "name": "Arch",
    "snippet": "export type Arch = \"x64\" | \"arm64\";",
    "location": {
      "filename": "./test.ts",
      "line": 76,
      "col": 0
    },
    "jsDoc": null,
    "typeAliasDef": {}
  },
  {
    "kind": "enum",
    "name": "Hello",
    "snippet": "export enum Hello {\n    World = \"world\",\n    Fizz = \"fizz\",\n    Buzz = \"buzz\",\n}",
    "location": {
      "filename": "./test.ts",
      "line": 81,
      "col": 0
    },
    "jsDoc": "/**\n * Some enum for good measure\n */",
    "enumDef": {
      "members": [
        {
          "name": "World"
        },
        {
          "name": "Fizz"
        },
        {
          "name": "Buzz"
        }
      ]
    }
  },
  {
    "kind": "variable",
    "name": "<TODO>",
    "snippet": "export const symbols: {\n/** Symbol to access exposed internal Deno API */\nreadonly internal: unique symbol;\n/** A symbol which can be used as a key for a custom method which will be\n * called when `Deno.inspect()` is called, or when the object is logged to\n * the console. */\nreadonly customInspect: unique symbol;\n// TODO(ry) move EOF here?\n};",
    "location": {
      "filename": "./test.ts",
      "line": 91,
      "col": 0
    },
    "jsDoc": "/** **UNSTABLE**: new API. Maybe move `Deno.EOF` here.\n *\n * Special Deno related symbols. */"
  }
]
